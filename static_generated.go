// Code generated by "esc -o static_generated.go -pkg httprecorder assets"; DO NOT EDIT.

package httprecorder

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/index.html": {
		local:   "assets/index.html",
		size:    11828,
		modtime: 1532665182,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}

// Code generated by "esc -o static_generated.go -pkg httprecorder assets"; DO NOT EDIT.

package httprecorder

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/index.html": {
		local:   "assets/index.html",
		size:    11602,
		modtime: 1532500920,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}

// Code generated by "esc -o embedded/static_generated.go -pkg embedded assets"; DO NOT EDIT.

package embedded

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/index.html": {
		local:   "assets/index.html",
		size:    11936,
		modtime: 1534222366,
		compressed: `
H4sIAAAAAAAC/+xae2/bOBL/35+Cxy0WNlBJm20W2GskF22a9FLkmlwe13YP9wcjji0mNOmQlB0j9Xc/
UJRt2bEeTpO0110DiU2RMxz+ZjgPiuHf3h7tnn0+3kOJGfBuK7RfiBPRjzAI3G21wgQI7bYQQigcgCEo
TojSYCJ8frbv/Y6LXYIMIMIjBuOhVAajWAoDwkR4zKhJIgojFoOXNZ4jJphhhHs6JhyiLf+XJVaJMUMP
rlM2ivAn7/y1tysHQ2LYBYcCXwYR0D7MKDkTV0gBj7A2Ew46ATAYJQp6EbYM9csg0IbEV0NiEv9CSqON
IsOYCj+Wg2D+INj2t/xfgljrxTN/wIQfa40REwb6iplJhHVCXvy+7f29/+9/bdPP++Pxx9PLg7d/iMO9
j+Jm9xJOP+4Pk/ds/O74k9q6pPQgOYI+S7f2x0e/XZ+8G+1/OqLv/9jGmfj2EyuptVSsz0SEiZBiMpCp
nq3PMMOhewLXKWijw8C1W2HgdNQKLySd5GMpG6GYE60jbOEiTIDyejxlNOe2OkrJcaHnLg8+V3bZmLsc
SjiVjMpGJr8WFpj8WsIvoGxUPlUF+4IgF0Z4fSXTIUZKcohw3iCKEY+TC2tH54ZxZiboIjVGCl0heMad
FHgjy3+o2ICoycwIX82mcvxw9wR6CnQSBqSGsyNAZjJcUK9ORonog8KI0QjHHIjC3V37FQaOoAKWCjzX
d5U9NuSCw0ww18j+e9ooNgSKESWGeAa08Zy7sNtJkdgwKbSXjS0zIrNwRev7VQ2IJkE6lhbBzAh/CgOT
bEZyfnK4OdGpISbVm9MdiM1pjlJTTRQGZTBZulKAQ7PwLes+t7fomdUsehkhH02nVQOVtVP0jD1HzwrK
zygPCsZQxSXXtzOmAhOPCQo3Eb69RbLX02AObBs9Y046/5j0AU2n2IrBegiuUbt0XCf/7bqm0yWr9ux8
I8gYgaBoOq3W04quMldZI2S98h1TWj8oGxhLCnbOIuh+7mv9f4JJpF0GKhtxfnLonxrFRD+TLeNWL13Q
RLzma9BDIuZuj9A+WHH9E9BDKTT4bqftSgroC9JZ440dtWspplO8Zvl3KddiUD7BGdyYDBEr25Mj4ux4
aR99QcqpbNelSWeTIdTtpUojKePY1AhyOYHrxnJ4jZlme+87Qd0ZyYPCvo7lD4V7eTzaQPza0J9rF8WS
220a4d8wymqECBu4MR7hrC9eohgs/LgZtB8kKuYuT4JFOephUBKhwyALWCup/d30bTXb314Dg7P7YpQu
FSd50T1jAyb6No1/UZZU1GSLs9bgbtpoHPOqUqImZdnAcJbjdh4R0QnEwGAE9LEidRHoWRzOJh0BRV9Q
T6oBMWdsAA8akaut8CtQc74M7TPBdPJkqLlZ/29he5sqkm20toZYCqo7j4Ubnc1UaXbV6D4doKX+bsnn
lfqmfFmP45vybOlb+CaXxz+lQ1qUDt/9XmpUvT8gMucnh08My6K6voLJc/RsRHgKerW0ngv4DyAUlG6S
yS04O55NM9smeqookO06GtfCG6vvrho3TK+b1xbN9Nc8u64f9RUe8m6eNzeZN5JOKmdNeY0Rc9ZgL5D8
xNS61le5P/2ZDIY77oDH7Th3LpM9dkE9utTuVNUlaETnwd4ARe9Pjz7Un7MGddJVQJPvJv8dGITzks2z
NRtuVCo1weVe2Mxel5S5qUq5l9CsdneVfPJdVauBxlposEcex9RmcNrCMRhywsQajBadTRdevegwKNtX
Cygqkh2Xpj1WtuO4f4t0x53HoV1J4UnLieXzwu8ywueC/hXi//QhfuMwXes3l31ms5CcV/+bxeRqp7g2
Fi/b/T2C8T2ixsaBt4mQy6DV+KMHib21aNeZ44PYzfr4uorEZgG2fGXrA2vNufMuZ/EVkgJJAUj2kElg
6Sz4ubVLk4ACROyfmLSaoblyLrvaFGT10Dbls6A9JH0m3AHOZaoN6028HEmv9FjbbSAByD9WMMreO3pb
pUe6nBXmAo8ZGFTFfLI0mjNxNb8GYZ9kip9PO50uX7ywHWxx9aX6hWBGmDBKQUTYqBRw92dOrlO50+St
3NJLRa08KfgEd2cC1HEoNbv1JldjWOswRpRp68jp/cD+6c8D7HrvZFOMOFUKhMlMzaZKuc21SlMg/zXn
dpDeSFPzWwX+8pTTKXL3BRZifu3OQfnrbJfO3BOqCofwAW7MN3AI82lXHYLtuLfNqq+0WTv5j+YIfkRA
1wXUYngPg3kELYTW0Cak2a25vjRyX6qiFYdMDFOTX7xzKLgbdln2gtHsElvWyOqm7PbRPKXBKGjAzCpr
xsv9LrCa74dgJroVeFX27MZfJjwaZCfyET4+Oj3DyOUkEX5Vtyo3vRs+FyC/SHh3Yh0rNjTdViuWQhvU
l2ey+F44Qm1GOyjqottsvAKTKoHahUf2Q2WcDkAYvw9mj4P9+WZyQNs5oh0/EwNFiNGdeqK5/jq+Ti8G
zLQ7jmramu60WnO66xTU5BQ4xEaq15y38X/W3yT7L+74Pan2SJy028BhUBDfrZtRFCHbY4V5bYxiF6mB
Nl7PD+fyZASE0r0RCHPItAEBqo1jm1fi56tgWiQ7O61pp7iG1bU7RXUquLahID3rofaYCSrHfixFj6lB
G3+WKdKpAjSRKRoTYZCRKOOLCOdLGe4r3Ok0UePCKteoxK7H2dXMmMLA1bOtMMgupP8vAAD//7xzKseg
LgAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
